[{"name": "app.py", "content": "from pathlib import Path\nimport pandas as pd\nimport yfinance as yf\nfrom faicons import icon_svg\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shiny.ui import output_ui\nfrom shinywidgets import render_plotly\nfrom shinyswatch import theme\nfrom stocks import stocks\nimport plotly.graph_objects as go\nfrom datetime import datetime\nimport plotly\n\n# Default to the last 30 days\nend = pd.Timestamp.now()\nstart = end - pd.Timedelta(days=30)\n\nui.page_opts(title=\"Adrian's Crypto Explorer\", fillable=True)\n\ntheme.vapor()\n\n# Implement a sidebar with inputs\nwith ui.sidebar():\n    ui.input_selectize(\"crypto\", \"Select Crypto\", choices=stocks, selected=\"ETH-USD\")\n    ui.input_date_range(\"dates\", \"Select Dates\", start=start, end=end)\n    \n\n    ui.hr()\n\n    ui.h6(\"Links:\")\n\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/adriacv17/cintel-06-custom\",\n        target=\"_blank\"\n    )\n\n    ui.a(\n        \"GitHub App\",\n        href=\"https://adriacv17.github.io/cintel-06-custom/\",\n        target=\"_blank\"\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n\n    ui.a(\"Market Data\", href=\"https://finance.yahoo.com/crypto/?.tsrc-fin-srch\",\n         target=\"_blank\")\n\nwith ui.layout_column_wrap(fill=False):\n    with ui.value_box(\n        showcase=icon_svg(\"dollar-sign\"),\n        theme=\"bg-gradient-green-red\",\n        ):\n        \"Current Price\"\n\n        @render.ui\n        def price():\n            close = get_data()[\"Close\"]\n            return f\"{close.iloc[-1]:.2f}\"\n\n    with ui.value_box(\n        showcase=output_ui(\"change_icon\"),\n        ):\n        \"Change\"\n\n        @render.ui\n        def change():\n            return f\"${get_change():.2f}\"\n\n\n    with ui.value_box(\n        showcase=icon_svg(\"percent\"),\n        theme=\"bg-gradient-green-red\",):\n        \"Percent Change\"\n\n        @render.ui\n        def change_percent():\n            return f\"{get_change_percent():.2f}%\"\n        \n    with ui.value_box(\n        showcase=icon_svg(\"user\"),\n        theme=\"bg-gradient-green-red\",):\n        \"Volume\"\n\n        @render.ui\n        def daily_volume():\n            return f\"{get_volume():.2f}\"\n\n\nwith ui.layout_columns():\n    with ui.card(full_screen=True):\n        ui.card_header(\"Price History and volume\")\n\n        @render_plotly\n        def plot_history():\n            crypto_data=get_data()\n            name = input.crypto()\n            colors= ['green' if row['Open']-row['Close'] >=0\n                     else 'red' for index, row in crypto_data.iterrows()]\n\n            fig =go.Figure()\n\n            fig = plotly.subplots.make_subplots(rows=4, cols=1, shared_xaxes=True, vertical_spacing=0.01, row_heights=[0.5,0.1,0.2,0.2])\n\n            fig.add_trace(go.Candlestick(x=crypto_data.index,\n                open=crypto_data['Open'], high=crypto_data['High'], low=crypto_data['Low'],\n                close=crypto_data['Close'], name='Market Data'))\n            \n            fig.add_trace(go.Bar(x=crypto_data.index, y=crypto_data[\"Volume\"],marker_color=colors),row=2, col=1)\n\n            fig.update_layout(height=450, width=600, showlegend=False, title=str(name) +\" Live Share Price:\",template='plotly_dark', margin=dict(l=20, r=20, t=100, b=0))\n            \n            fig.update_xaxes(rangeslider_visible=False)\n\n            fig.update_yaxes(title_text=\"Volume\", row=2, col=1)\n\n            fig.update_yaxes(title_text=\"Share Price\", row=1, col=1)\n\n            return fig\n\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Selected Crypto Historical DataTable\")\n\n        @render.data_frame\n        def historical_data():\n            y = get_data().reset_index().drop(\"Dividends\", axis=1).drop(\"Stock Splits\", axis=1)\n            return y\n\n@reactive.calc\ndef get_ticker():\n    return yf.Ticker(input.crypto())\n\n\n@reactive.calc\ndef get_data():\n    dates = input.dates()\n    return get_ticker().history(start=start, end=end)\n\n\n@reactive.calc\ndef get_change():\n    close = get_data()[\"Close\"]\n    return close.iloc[-1] - close.iloc[-2]\n\n\n@reactive.calc\ndef get_change_percent():\n    close = get_data()[\"Close\"]\n    change = close.iloc[-1] - close.iloc[-2]\n    return change / close.iloc[-2] * 100\n\n@reactive.calc\ndef get_volume():\n    close=get_data()[\"Volume\"]\n    return close.iloc[0]\n\nwith ui.hold():\n\n    @render.ui\n    def change_icon():\n        change = get_change()\n        icon = icon_svg(\"arrow-up\" if change >= 0 else \"arrow-down\")\n        icon.add_class(f\"text-{('success' if change >= 0 else 'danger')}\")\n        return icon", "type": "text"}, {"name": "stocks.py", "content": "stocks = {\n    \"ETH-USD\": \"Ethereum USD\",\n    \"DOGE-USD\": \"Dogecoin USD\",\n    \"BTC-USD\": \"Bitcoin USD\",\n}", "type": "text"}]